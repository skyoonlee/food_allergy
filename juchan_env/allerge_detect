import requests
import xml.etree.ElementTree as ET
import pandas as pd
from rapidfuzz import process, fuzz

# ✅ 로컬 XML 파일 불러오기
tree = ET.parse("api_xml.xml")  # 같은 폴더 안에 있는 recipes.xml
root = tree.getroot()


# row.find("RCP_SEQ").text -> row.findtext("RCP_SEQ") 변경
# 레시피 NM 지운 곳에서 None 값 출력 오류수정 (continue 방식보다 text 추출 방식으로 진행)
data = []
for row in root.iter("row"):
    item = {
        "레시피번호": row.findtext("RCP_SEQ"),
        "레시피명": row.findtext("RCP_NM"),
        "재료정보": row.findtext("RCP_PARTS_DTLS")
    }
    data.append(item)


df = pd.DataFrame(data)

pd.set_option("display.max_rows", None)

# 유저 입력
food = str(input("음식명 입력: "))
allergy = str(input("알레르기 재료 입력: "))

# 알레르기 동의어 사전
allergy_dict = {
    "계란": ["계란", "달걀", "에그", "난백", "난황", "egg"],
    "우유": ["우유", "밀크", "버터", "치즈", "요거트", "분유", "milk"],
    "밀": ["밀", "밀가루", "소맥", "wheat", "글루텐","햄버거","라면","빵"],
    "갑각류": ["새우", "새우살", "대하", "대게", "꽃게", "킹크랩", "랍스터", "게", "crab", "shrimp", "lobster"],
    "생선": ["생선", "어류", "고등어", "연어", "참치", "삼치", "fish", "mackerel", "salmon", "tuna","북어","황태","아귀"],
    "돼지고기": ["돼지고기", "돼지", "돈육", "pork"],
    "견과류": ["땅콩", "peanut","호두", "walnut","콩", "대두", "두유", "soybean", "soy","잣"],
    "조개": ["조개", "홍합", "바지락", "굴", "가리비","관자", "clam", "mussel", "scallop", "oyster"],
    "복숭아": ["복숭아", "peach"],
    "콩": ["콩", "대두", "두유", "soybean", "soy"],
    "사과": ["사과", "apple"],
    "닭고기": ["닭고기", "닭", "치킨", "계육", "chicken"],
    "메밀": ["메밀", "buckwheat"],
    "쇠고기": ["쇠고기", "소고기", "소", "beef"],
    "키위": ["키위", "kiwi"],
    "아몬드": ["아몬드", "almond"],
    "들깨": ["들깨", "perilla", "perilla seed"],
    "토마토": ["토마토", "tomato","케첩"],
    "오징어": ["오징어", "squid"],
    "해조류": ["미역", "seaweedquid"],
    # 필요하면 추가하세요
}

def fuzzy_search_rapidfuzz(df, query, topn=5):
    names = df["레시피명"].astype(str).tolist()
    results = process.extract(query, names, scorer=fuzz.WRatio, limit=topn)
    out = [{"레시피명": m[0], "점수(0~100)": m[1]} for m in results]
    return pd.DataFrame(out)

# 레시피 검색
high_possible_result = fuzzy_search_rapidfuzz(df, food, topn=5)
print(high_possible_result)

if not high_possible_result.empty:
    recipe_name = high_possible_result.iloc[0]["레시피명"]  # 가장 높은 후보
    result_ing = df.loc[df["레시피명"] == recipe_name, "재료정보"]

    if not result_ing.empty:
        # 콤마 기준으로 나눠서 리스트화
        # replace로 줄바꿈 \n 표기 삭제
        ingredients = [i.strip() for i in result_ing.iloc[0].replace("\n"," ").split(",")]
        print("재료 목록:", ingredients)

        # 알레르기 동의어 목록 가져오기
        allergy_list = allergy_dict.get(allergy, [allergy])

        # 검사
        found = [ing for ing in ingredients if any(a in ing for a in allergy_list)]

        if found:
            print(f"⚠️ 알레르기 재료 발견: {found} → 먹지마세요!")
        else:
            print("안전합니다 👍")
    else:
        print("해당 레시피에 재료정보가 없습니다.")
else:
    print("유사한 레시피를 찾지 못했습니다.")
