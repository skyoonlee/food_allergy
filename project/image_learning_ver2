import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms, models
import numpy as np
from google.colab import drive
import os
from PIL import Image

drive.mount('/content/drive')

# 1. 커스텀 데이터셋 클래스 만들기 (수정된 버전 ✨)
class FoodDataset(Dataset):
    def __init__(self, data_dir, transform=None):
        self.data_dir = data_dir
        self.transform = transform
        self.samples = []
        self.class_to_idx = {}
        idx_counter = 0

        # 모든 하위 디렉토리를 탐색하여 실제 음식 클래스를 찾아요!
        for root, dirs, files in os.walk(data_dir):
            # 현재 root 디렉토리에 파일이 있고 하위 디렉토리가 없다면
            # 이 root 디렉토리가 바로 실제 음식 클래스 폴더예요!
            if files and not dirs:
                class_name = os.path.basename(root) # 폴더 이름을 클래스 이름으로 사용
                
                if class_name not in self.class_to_idx:
                    self.class_to_idx[class_name] = idx_counter
                    idx_counter += 1
                
                for img_name in files:
                    # 이미지 파일만 추가 (예: .jpg, .png 등)
                    if img_name.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                        img_path = os.path.join(root, img_name)
                        self.samples.append((img_path, self.class_to_idx[class_name]))
        
        self.classes = list(self.class_to_idx.keys())
        print(f"✅ 총 {len(self.classes)}개의 음식 클래스를 찾았어요: {self.classes}")
    
    def __len__(self):
        return len(self.samples)
    
    def __getitem__(self, idx):
        img_path, label = self.samples[idx]
        image = Image.open(img_path).convert('RGB')
        
        if self.transform:
            image = self.transform(image)
            
        return image, label

# 2. 데이터 전처리 정의 (이 부분은 이전 코드와 동일해요!)
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# 3. 새로운 데이터셋 불러오기 (최상위 폴더 경로만 지정하면 돼요!)
# /content/drive/MyDrive/Food_allergy/image/ 이 폴더 안에 구이, 찌개, 볶음 폴더가 있고
# 그 아래에 갈비구이, 김치찌개 등의 실제 음식 폴더가 있다면 이 경로를 사용해주세요!
new_data_dir = '/content/drive/MyDrive/Food_allergy/image/'  
new_dataset = FoodDataset(new_data_dir, transform=transform)
new_dataloader = DataLoader(new_dataset, batch_size=32, shuffle=True)

# 4. 기존 모델 불러오기 (클래스 개수만 변경해주면 돼요!)
try:
    # 기존 모델 불러오기
    # 모델 저장할 때 모델의 fc layer도 같이 저장되므로 여기선 fc layer를 다시 정의하지 않아도 됩니다.
    # 만약 pretrained=True 로 로드된 모델이라면 num_classes 변경해야 합니다.
    model = torch.load('') # 여기에 기존 모델 경로를 넣어주세요. 예: '/content/drive/MyDrive/food_model.pt'
    print("✅ 기존 모델 불러오기 성공!")
    # 이미 학습된 모델의 최종 분류 층만 변경하고 싶을 때 (새로운 클래스 추가/변경 시)
    # num_classes = len(new_dataset.classes)
    # model.fc = nn.Linear(model.fc.in_features, num_classes)
except FileNotFoundError: # torch.load가 파일을 못 찾을 때 FileNotFoundError를 냅니다.
    print("❌ 기존 모델이 없어요! 처음부터 학습을 시작할게요.")
    # ResNet-18 모델 불러와서 마지막 층 수정하기
    model = models.resnet18(pretrained=True)
    num_classes = len(new_dataset.classes) # 수정된 FoodDataset에서 찾은 클래스 개수 사용
    model.fc = nn.Linear(model.fc.in_features, num_classes)
except Exception as e: # 다른 오류 발생 시
    print(f"모델 로드 중 오류 발생: {e}")
    print("❌ 기존 모델 로드에 실패하여 처음부터 학습을 시작할게요.")
    model = models.resnet18(pretrained=True)
    num_classes = len(new_dataset.classes)
    model.fc = nn.Linear(model.fc.in_features, num_classes)


# 음식 이름들 각각의 모델이 아닌 하나의 통합 모델로 접근하기 위하여 수정
# 모든 음식 카테고리를 한 번에 분류하고, 관리가 편하고, 추론시 하나의 모델만 불러오면 됨
# 카테고리 간 특징을 공유하며 학습
# 기존 러닝 모델은 FoodDataset 클래스 data_dir 바로 아래 있는 폴더들을 클래스로 인식하도록 되어 있었음
# 그 아래 세부적인 음식 이름들을 클래스로 인식하고 학습 시키기 위해 FoodDataset 클래스 수정
