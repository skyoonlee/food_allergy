import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
from torchvision import transforms, models
from PIL import Image
import os
import numpy as np
from google.colab import drive

drive.mount('/content/drive')

# 1. 커스텀 데이터셋 클래스 만들기
class FoodDataset(Dataset):
    def __init__(self, data_dir, transform=None):
        self.data_dir = data_dir
        self.transform = transform
        self.classes = os.listdir(data_dir)
        self.class_to_idx = {cls: i for i, cls in enumerate(self.classes)}
        
        self.samples = []
        for class_name in self.classes:
            class_dir = os.path.join(data_dir, class_name)
            for img_name in os.listdir(class_dir):
                img_path = os.path.join(class_dir, img_name)
                self.samples.append((img_path, self.class_to_idx[class_name]))
    
    def __len__(self):
        return len(self.samples)
    
    def __getitem__(self, idx):
        img_path, label = self.samples[idx]
        image = Image.open(img_path).convert('RGB')
        
        if self.transform:
            image = self.transform(image)
            
        return image, label

# 2. 데이터 전처리 정의
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.RandomHorizontalFlip(),
    transforms.RandomRotation(10),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# 3. 새로운 데이터셋 불러오기
new_data_dir = '/content/drive/MyDrive/Food_allergy/image/구이/'  # 새로운 음식 이미지가 있는 폴더
new_dataset = FoodDataset(new_data_dir, transform=transform)
new_dataloader = DataLoader(new_dataset, batch_size=32, shuffle=True)

# 4. 기존 모델 불러오기 (또는 없으면 새로 만들기)
try:
    # 기존 모델 불러오기
    model = torch.load('')
    print("✅ 기존 모델 불러오기 성공!")
except:
    print("❌ 기존 모델이 없어요! 처음부터 학습을 시작할게요.")
    # ResNet-18 모델 불러와서 마지막 층 수정하기
    model = models.resnet18(pretrained=True)
    num_classes = len(new_dataset.classes)
    model.fc = nn.Linear(model.fc.in_features, num_classes)

# 5. 학습 설정
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001)  # 낮은 학습률 사용

# 6. 추가 학습 함수
def train_model(model, dataloader, criterion, optimizer, num_epochs=5):
    model.train()
    
    for epoch in range(num_epochs):
        running_loss = 0.0
        correct = 0
        total = 0
        
        for inputs, labels in dataloader:
            inputs, labels = inputs.to(device), labels.to(device)
            
            # 기울기 초기화
            optimizer.zero_grad()
            
            # 순전파 + 역전파 + 최적화
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            
            # 통계
            running_loss += loss.item()
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
        
        epoch_loss = running_loss / len(dataloader)
        epoch_acc = 100 * correct / total
        print(f'에폭 {epoch+1}/{num_epochs} | 손실: {epoch_loss:.4f} | 정확도: {epoch_acc:.2f}%')
    
    return model

# 7. 모델 추가 학습 시작
print("🚀 추가 학습 시작!")
model = train_model(model, new_dataloader, criterion, optimizer)

# 8. 새로운 모델 저장
torch.save(model, 'food_allergy_model_updated.pt')
print("✨ 추가 학습 완료! 새로운 모델이 'food_allergy_model_updated.pt'로 저장되었어요!")

# 9. 모델 테스트 (간단하게)
def test_model(model, dataloader):
    model.eval()
    correct = 0
    total = 0
    
    with torch.no_grad():
        for inputs, labels in dataloader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    
    accuracy = 100 * correct / total
    print(f'테스트 정확도: {accuracy:.2f}%')
    return accuracy

# 테스트 데이터로더 생성 (같은 데이터로 간단히 테스트)
test_model(model, new_dataloader)
