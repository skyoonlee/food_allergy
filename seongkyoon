

# CSV 파일 읽기
df = pd.read_csv('food_allergy/csv/서울관광재단_음식이미지정보_20211222.csv')
image_urls = df['음식이미지(URL)']

# 저장 디렉토리 생성
save_dir = 'downloaded_images2'
if not os.path.exists(save_dir):
    os.makedirs(save_dir)

# 다운로드 함수 정의
def download_image(args):
    i, url = args
    try:
        parsed_url = urlparse(url)
        # URL 경로에서 파일 확장자 추출
        file_extension = os.path.splitext(parsed_url.path)[1]
        
        # 만약 확장자가 없거나 이상하면 .jpg로 기본 설정
        if not file_extension or file_extension.lower() not in ['.jpg', '.jpeg', '.png', '.gif', '.webp']:
            file_extension = '.jpg'

        # 파일명 생성
        file_name = os.path.join(save_dir, f'kfood_a_{i}{file_extension}')
        
        # 이미지 다운로드
        urllib.request.urlretrieve(url, file_name)
        return f"다운로드 완료: {url} -> {file_name}"
    except Exception as e:
        return f"다운로드 실패: {url}, 오류: {e}"

# 시작 시간 기록
start_time = time.time()

# 멀티스레딩으로 다운로드 (이미지 다운로드는 I/O 작업이라 스레딩이 효과적)
with concurrent.futures.ThreadPoolExecutor(max_workers=20) as executor:
    # 인덱스와 URL을 함께 전달
    results = list(executor.map(download_image, enumerate(image_urls)))

# 결과 출력
for result in results:
    print(result)

# 종료 시간 기록 및 소요 시간 출력
end_time = time.time()
print(f"총 소요 시간: {end_time - start_time:.2f}초")
